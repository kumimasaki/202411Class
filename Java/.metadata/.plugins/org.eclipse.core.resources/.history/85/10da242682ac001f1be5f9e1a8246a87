package lesson3_2.test;

import java.util.ArrayList;
import java.util.List;

public class ProductStreamExample {
    public static void main(String[] args) {
        // 商品情報のリストを作成
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", "Electronics", 1000.0, 5));
        products.add(new Product("Phone", "Electronics", 800.0, 10));
        products.add(new Product("Desk", "Furniture", 300.0, 15));
        products.add(new Product("Chair", "Furniture", 150.0, 20));
        products.add(new Product("Monitor", "Electronics", 200.0, 8));
        products.add(new Product("Cupboard", "Furniture", 400.0, 12));
        products.add(new Product("Headphones", "Electronics", 150.0, 25));

        // 1. 在庫が 10 未満の商品のリストを作成
        System.out.println("在庫が10未満の商品:");
        products.stream()
                .filter(p -> p.getStock() < 10)
                .forEach(p -> System.out.println(p.getName() + ": " + p.getStock()));

        // 2. "Electronics" カテゴリーの商品を価格順（昇順）に並べる
        System.out.println("\n\"Electronics\" カテゴリーの商品（価格順）:");
        products.stream()
                .filter(p -> "Electronics".equals(p.getCategory()))
                .sorted((p1, p2) -> Double.compare(p1.getPrice(), p2.getPrice()))
                .forEach(p -> System.out.println(p.getName() + ": " + p.getPrice()));

        // 3. 最も高い価格の商品を見つける
        System.out.println("\n最も高い価格の商品:");
        Product mostExpensive = products.stream()
                                        .max((p1, p2) -> Double.compare(p1.getPrice(), p2.getPrice()))
                                        .orElse(null);
        if (mostExpensive != null) {
            System.out.println(mostExpensive.getName() + ": " + mostExpensive.getPrice());
        }

        // 4. 全商品の価格の合計を計算
        System.out.println("\n全商品の価格の合計:");
        double totalPrice = products.stream()
                .mapToDouble(Product::getPrice)
                .sum();
        System.out.println(totalPrice);
    }
}