package lesson3_2.test;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class ProductStreamExample {
    public static void main(String[] args) {
        // 商品情報のリストを作成（価格と在庫は整数で管理）
        List<Product> products = new ArrayList<>();
        products.add(new Product("Laptop", "Electronics", 100000, 5)); // 1000.0 → 100000（整数表現）
        products.add(new Product("Phone", "Electronics", 80000, 10));
        products.add(new Product("Desk", "Furniture", 30000, 15));
        products.add(new Product("Chair", "Furniture", 15000, 20));
        products.add(new Product("Monitor", "Electronics", 20000, 8));
        products.add(new Product("Cupboard", "Furniture", 40000, 12));
        products.add(new Product("Headphones", "Electronics", 15000, 25));

        // 1. 在庫が 10 未満の商品をリスト作成
        System.out.println("在庫が10未満の商品:");
        products.stream()
                .filter(p -> p.getStock() < 10)
                .forEach(p -> System.out.println(p.getName() + ": " + p.getStock()));

        // 2. "Electronics" カテゴリーの商品を価格順（昇順）に並べる
        System.out.println("\n\"Electronics\" カテゴリーの商品（価格順）:");
        products.stream()
                .filter(p -> "Electronics".equals(p.getCategory()))
                .sorted(Comparator.comparingInt(p -> p.getPrice())) // Comparatorを使用
                .forEach(p -> System.out.println(p.getName() + ": " + p.getPrice()));

        // 3. 最も高い価格の商品を見つける
        System.out.println("\n最も高い価格の商品:");
        Product mostExpensive = products.stream()
                                        .sorted((p1, p2) -> Integer.compare(p2.getPrice(), p1.getPrice())) // 降順にソート
                                        .findFirst() // 先頭の要素を取得
                                        .orElse(null);
        if (mostExpensive != null) {
            System.out.println(mostExpensive.getName() + ": " + mostExpensive.getPrice());
        }

        // 4. 全商品の価格の合計を計算
        System.out.println("\n全商品の価格の合計:");
        int totalPrice = products.stream()
                                 .map(p -> p.getPrice()) // 価格を取り出す
                                 .reduce(0, (sum, price) -> sum + price); // reduceで合計を計算
        System.out.println(totalPrice);
    }
}